//inputs.js

import { setFromPlace, setToPlace } from './route.js'; // –¥–ª—è –∑–∞–ø—É—Å–∫—É –ø–æ–±—É–¥–æ–≤–∏ –º–∞—Ä—à—Ä—É—Ç—É
import { saveFormToLS } from '../storage/localStorage.js'; // –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É –±—Ä–∞—É–∑–µ—Ä—ñ

let fromInput, toInput; // –ø–æ–ª—è –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å
let fromAutocomplete, toAutocomplete; // –ø—ñ–¥–∫–∞–∑–∫–∏ –∞–¥—Ä–µ—Å
let manualFromMarker, manualToMarker; // –º–∞—Ä–∫–µ—Ä–∏ –Ω–∞ –º–∞–ø—ñ (—Ä—É—á–Ω–µ —Å—Ç–∞–≤–ª–µ–Ω–Ω—è)
let isSettingFrom = true; // —è–∫–∏–π –º–∞—Ä–∫–µ—Ä —Å—Ç–∞–≤–∏–º–æ: A (true) –∞–±–æ B (false)
let mapRef, MarkerRef; // –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–∞–ø—É —Ç–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –º–∞—Ä–∫–µ—Ä—ñ–≤

let isAutocompleteUsed = false;

//setupInputs(...) ‚Äî –≥–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
export function setupInputs({ map, Marker, Autocomplete }) {
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±'—î–∫—Ç–∏ –º–∞–ø–∏ —Ç–∞ –º–∞—Ä–∫–µ—Ä–∞
  mapRef = map;
  MarkerRef = Marker;

  // –û—Ç—Ä–∏–º—É—î–º–æ DOM-–µ–ª–µ–º–µ–Ω—Ç–∏ —ñ–Ω–ø—É—Ç—ñ–≤
  fromInput = document.getElementById('get-in');
  toInput = document.getElementById('get-out');

  // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –ø—ñ–¥–∫–∞–∑–∫–∏ –¥–æ —ñ–Ω–ø—É—Ç—ñ–≤ (Autocomplete)
  fromAutocomplete = new Autocomplete(fromInput, {
    types: ['geocode'],
    componentRestrictions: { country: 'cz' },
  });

  toAutocomplete = new Autocomplete(toInput, {
    types: ['geocode'],
    componentRestrictions: { country: 'cz' },
  });

  // –ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±—Ä–∞–≤ –∞–¥—Ä–µ—Å—É "–∑–≤—ñ–¥–∫–∏"
  fromAutocomplete.addListener('place_changed', () => {
    isAutocompleteUsed = true; // ‚ö†Ô∏è –≤–∫–∞–∑—É—î–º–æ, —â–æ –±—É–ª–∞ –ø—ñ–¥–∫–∞–∑–∫–∞
    const place = fromAutocomplete.getPlace();
    if (!place.geometry?.location) return;

    setFrom(place);
  });

  // –ö–æ–ª–∏ –≤–∏–±—Ä–∞–≤ –∞–¥—Ä–µ—Å—É "–∫—É–¥–∏"
  toAutocomplete.addListener('place_changed', () => {
    isAutocompleteUsed = true; // ‚ö†Ô∏è –≤–∫–∞–∑—É—î–º–æ, —â–æ –±—É–ª–∞ –ø—ñ–¥–∫–∞–∑–∫–∞
    const place = toAutocomplete.getPlace();
    if (!place.geometry?.location) return;

    setTo(place);
  });

  // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∫–ª—ñ–∫–Ω—É–≤ –Ω–∞ –º–∞–ø—É ‚Äî –≤–∏–∫–ª–∏–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É
  map.addListener('click', onMapClick);

  // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–æ—á–æ–∫ –Ω–∞ –º–∞–ø—ñ
  setupButtons();
}

// üìç setFrom(place) ‚Äî —Å—Ç–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä "A", –∑–±–µ—Ä—ñ–≥–∞—î –∞–¥—Ä–µ—Å—É –π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
export function setFrom(place) {
  // –Ø–∫—â–æ –º–∞—Ä–∫–µ—Ä –≤–∂–µ –±—É–≤ ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ
  if (manualFromMarker) manualFromMarker.setMap(null);

  // –°—Ç–∞–≤–∏–º–æ –Ω–æ–≤–∏–π –º–∞—Ä–∫–µ—Ä
  manualFromMarker = new MarkerRef({
    position: place.geometry.location,
    map: mapRef,
    label: 'A',
  });

  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∞–¥—Ä–µ—Å—É –≤ –ø–æ–ª–µ
  fromInput.value = place.formatted_address || place.name || '';

  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ—á–∫—É –≤ –º–æ–¥—É–ª—å route.js —ñ –≤ localStorage
  setFromPlace(place);
  saveFormToLS({
    fromAddress: fromInput.value,
    toAddress: toInput.value,
    fromCoords: place.geometry.location.toJSON(),
    toCoords: manualToMarker?.getPosition()?.toJSON() || null,
  });
}

//üìç setTo(place) ‚Äî —Å—Ç–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä "B", –∑–±–µ—Ä—ñ–≥–∞—î –∞–¥—Ä–µ—Å—É –π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
export function setTo(place) {
  // –Ø–∫—â–æ –º–∞—Ä–∫–µ—Ä –≤–∂–µ –±—É–≤ ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ
  if (manualToMarker) manualToMarker.setMap(null);

  // –°—Ç–∞–≤–∏–º–æ –Ω–æ–≤–∏–π –º–∞—Ä–∫–µ—Ä
  manualToMarker = new MarkerRef({
    position: place.geometry.location,
    map: mapRef,
    label: 'B',
  });
  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∞–¥—Ä–µ—Å—É –≤ –ø–æ–ª–µ
  toInput.value = place.formatted_address || place.name || '';

  //  –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ—á–∫—É –≤ –º–æ–¥—É–ª—å route.js —ñ –≤ localStorage
  setToPlace(place);
  saveFormToLS({
    fromAddress: fromInput.value,
    toAddress: toInput.value,
    fromCoords: manualFromMarker?.getPosition()?.toJSON() || null,
    toCoords: place.geometry.location.toJSON(),
  });
}

// –ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∫–ª–∞—Ü–∞—î –ø–æ –º–∞–ø—ñ ‚Äî –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è —Ç–æ—á–∫–∏
function onMapClick(e) {
  const geocoder = new google.maps.Geocoder(); // —Å—Ç–≤–æ—Ä—é—î–º–æ –≥–µ–æ–∫–æ–¥–µ—Ä

  // –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ –∞–¥—Ä–µ—Å—É
  geocoder.geocode({ location: e.latLng }, (results, status) => {
    if (status === 'OK' && results[0]) {
      const place = {
        geometry: { location: e.latLng }, // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
        formatted_address: results[0].formatted_address, // –∞–¥—Ä–µ—Å–∞
      };

      // —è–∫—â–æ –∑–∞—Ä–∞–∑ –æ–±–∏—Ä–∞—î–º–æ "–∑–≤—ñ–¥–∫–∏" ‚Äî —Å—Ç–∞–≤–∏–º–æ A, —ñ–Ω–∞–∫—à–µ B
      if (isSettingFrom) {
        setFrom(place);
      } else {
        setTo(place);
      }
    }
  });
}

// –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î –≤–≤–µ–¥–µ–Ω—É –∞–¥—Ä–µ—Å—É –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É
function geocodeAddress(input, isFrom) {
  const address = input.value.trim(); // –±–µ—Ä–µ–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –ø–æ–ª—è
  if (!address) return; // —è–∫—â–æ –ø—É—Å—Ç–æ ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ

  const geocoder = new google.maps.Geocoder(); // —Å—Ç–≤–æ—Ä—é—î–º–æ –≥–µ–æ–∫–æ–¥–µ—Ä

  // —à—É–∫–∞—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è –≤–≤–µ–¥–µ–Ω–æ—ó –∞–¥—Ä–µ—Å–∏
  geocoder.geocode({ address }, (results, status) => {
    if (status === 'OK' && results[0]) {
      const location = results[0].geometry.location;

      const place = {
        geometry: { location },
        formatted_address: results[0].formatted_address,
      };

      // —è–∫—â–æ —Ü–µ –ø–æ–ª–µ "–∑–≤—ñ–¥–∫–∏" ‚Äî —Å—Ç–∞–≤–∏–º–æ A, —ñ–Ω–∞–∫—à–µ B
      isFrom ? setFrom(place) : setTo(place);
    } else {
      // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å—É ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É
      alert('‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –∞–¥—Ä–µ—Å–∞. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–∑ –ø—ñ–¥–∫–∞–∑–æ–∫ –∞–±–æ –∑ –∫–∞—Ä—Ç–∏.');
      input.value = ''; // –æ—á–∏—â–∞—î–º–æ –ø–æ–ª–µ

      // –≤–∏–¥–∞–ª—è—î–º–æ –º–∞—Ä–∫–µ—Ä, —è–∫—â–æ –≤—ñ–Ω –±—É–≤
      if (isFrom && manualFromMarker) manualFromMarker.setMap(null);
      if (!isFrom && manualToMarker) manualToMarker.setMap(null);

      // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—á–∏—â–µ–Ω—ñ –¥–∞–Ω—ñ –≤ LocalStorage
      saveFormToLS({
        fromAddress: fromInput.value,
        toAddress: toInput.value,
        fromCoords: manualFromMarker?.getPosition()?.toJSON() || null,
        toCoords: manualToMarker?.getPosition()?.toJSON() || null,
      });
    }
  });
}

// –ù–∞–ª–∞—à—Ç–æ–≤—É—î –∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É –∞–¥—Ä–µ—Å–∏ –Ω–∞ –º–∞–ø—ñ (—Ä—É—á–Ω–µ —Å—Ç–∞–≤–ª–µ–Ω–Ω—è –º–∞—Ä–∫–µ—Ä–∞)
function setupButtons() {
  const fromBtn = document.getElementById('set-from-btn');
  const toBtn = document.getElementById('set-to-btn');

  // –ö–æ–ª–∏ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ ‚Äú–æ–±—Ä–∞—Ç–∏ —Ç–æ—á–∫—É –ø–æ—Å–∞–¥–∫–∏‚Äù ‚Äî –≤–º–∏–∫–∞—î–º–æ —Ä–µ–∂–∏–º –≤–∏–±–æ—Ä—É A
  fromBtn?.addEventListener('click', () => {
    isSettingFrom = true;
    enableCursorPickMode();
    alert('üëâ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–∞—Ä—Ç—É, —â–æ–± –æ–±—Ä–∞—Ç–∏ —Ç–æ—á–∫—É –ø–æ—Å–∞–¥–∫–∏ (–ú–∞—Ä–∫–µ—Ä A)');
  });

  // –ö–æ–ª–∏ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ ‚Äú–æ–±—Ä–∞—Ç–∏ —Ç–æ—á–∫—É –≤–∏—Å–∞–¥–∫–∏‚Äù ‚Äî –≤–º–∏–∫–∞—î–º–æ —Ä–µ–∂–∏–º –≤–∏–±–æ—Ä—É B
  toBtn?.addEventListener('click', () => {
    isSettingFrom = false;
    enableCursorPickMode();
    alert('üëâ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–∞—Ä—Ç—É, —â–æ–± –æ–±—Ä–∞—Ç–∏ —Ç–æ—á–∫—É –≤–∏—Å–∞–¥–∫–∏ (–ú–∞—Ä–∫–µ—Ä B)');
  });
}

// –î–æ–¥–∞—î –∫–ª–∞—Å –¥–æ –º–∞–ø–∏, —â–æ–± –≤—ñ–∑—É–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∂–∏–º –≤–∏–±–æ—Ä—É —Ç–æ—á–∫–∏
function enableCursorPickMode() {
  document.getElementById('map')?.classList.add('map-pick-mode');
}

// —Ñ—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è –º–∞—Ä–∫–µ—Ä—ñ–≤
export function clearMarkers() {
  if (manualFromMarker) {
    manualFromMarker.setMap(null);
    manualFromMarker = null;
  }

  if (manualToMarker) {
    manualToMarker.setMap(null);
    manualToMarker = null;
  }

  // –æ—á–∏—Å—Ç–∏–º–æ –ø–æ–ª—è –≤–≤–æ–¥—É (–æ–ø—Ü—ñ–π–Ω–æ)
  fromInput.value = '';
  toInput.value = '';
}
